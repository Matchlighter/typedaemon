---
name: Publish Images and Release

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
  release:
    types: [published]
  # schedule:
  #   - cron: "0 2 * * *"
  push:
    branches:
      - master
    #   - 'releases/**'
    # tags:
    #   - v*

# Release -> build and push beta/stable
# Push to master -> build and push 'edge'

permissions:
  contents: read

jobs:
  determine-version:
    name: Determine Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - id: check
        uses: EndBug/version-check@v2
        with:
          diff-search: true
          token: ${{ secrets.GITHUB_TOKEN }}

          # You can use this to make the action use the current version (either from the
          # local file or the provided URL, see the `file-url` option) as either the added
          # or deleted version.
          # Accepted values are 'new' (if you want that version to be the "added" one) and
          # 'old' (to make it the "deleted" one).
          # Default: ''
          # assume-same-version: old

      - name: Generate short tags
        id: tags
        run: |
          script/generate_tags.py --package-version="${{ steps.check.outputs.version }}" --package-version-changed="${{ steps.check.outputs.changed }}"

    outputs:
      image: ${{ steps.tags.outputs.image }}
      version: ${{ steps.tags.outputs.version }}
      channel: ${{ steps.tags.outputs.channel }}
      tags: ${{ steps.tags.outputs.tags }}
      tags_json: ${{ steps.tags.outputs.tags_json }}

  build-docker:
    name: Build and publish Typedaemon # ${{ matrix.image.title}}
    if: github.repository == 'matchlighter/typedaemon'
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs:
      - determine-version
    # continue-on-error: ${{ matrix.image.title == 'lint' }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm/v7
          - linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REPO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,"name=${{ needs.determine-version.outputs.image }}",push-by-digest=true,name-canonical=true,push=true

          # context: .
          # file: ./Dockerfile

          cache-from: type=registry,ref=${{ needs.determine-version.outputs.image }}:cache-${{ needs.determine-version.outputs.channel }}
          cache-to: type=registry,ref=${{ needs.determine-version.outputs.image }}:cache-${{ needs.determine-version.outputs.channel }},mode=max

          build-args: |
            BUILD_VERSION=${{ needs.determine-version.outputs.version }}
            BUILD_CHANNEL=${{ needs.determine-version.outputs.channel }}

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  release-docker:
    name: Combine multi-arch images
    if: github.repository == 'matchlighter/typedaemon'
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    needs:
      - determine-version
      - build-docker
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Log in to the GitHub container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr 'map("-t " + .) | join(" ")' <<< '${{ needs.determine-version.outputs.tags_json }}') \
            $(printf '${{ needs.determine-version.outputs.image }}@sha256:%s ' *)

  create-release:
    if: github.repository == 'matchlighter/typedaemon' && github.event_name != 'release' && needs.determine-version.outputs.channel == 'release'
    needs:
      - determine-version
      - release-docker
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Fetch tags
        run: git fetch --prune --unshallow --tags
      - name: Generate Release Message
        id: message
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_HA_ADDON_REPO_TOKEN }}
          script: |
            const last_release_resp = await github.rest.repos.getLatestRelease({
              owner: "matchlighter",
              repo: "typedaemon",
            });
            const last_release = last_release_resp?.data;

            const diff = last_release ? `refs/tags/${last_release.tag_name}..HEAD` : "";

            let message = '';
            await exec.exec(`git log ${diff} --pretty=format:"- %h %s"`, [], {
              listeners: {
                stdout: (data) => { message += data.toString(); },
              }
            })

            core.setOutput("body", message.trim());

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.message.outputs.body }}
          tag_name: ${{ needs.determine-version.outputs.version }}
          target_commitish: ${{ github.ref }}
          prerelease: ${{ needs.determine-version.outputs.channel != 'release' }}

    outputs:
      body: ${{ steps.message.outputs.body }}
      release_id: ${{ steps.release.outputs.id }}

  deploy-ha-addon-repo:
    if: ${{ !failure() && github.repository == 'matchlighter/typedaemon' && needs.determine-version.outputs.channel == 'release' }}
    runs-on: ubuntu-latest
    needs:
      - determine-version
      - release-docker
      - create-release
    steps:
      - name: Trigger Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEPLOY_HA_ADDON_REPO_TOKEN }}
          script: |
            let content = ${{ toJSON(github.event.release.body) }} || ${{ toJSON(needs.create-releaseoutputs.body) }};

            if (!content) {
              const release_resp = await github.rest.repos.getRelease({
                owner: "matchlighter",
                repo: "typedaemon",
                release_id: ${{ needs.create-release.outputs.release_id }},
              });
              const release = release_resp.data;
              console.log(release);
              content = release.body;
            }

            console.log(content);

            await github.rest.actions.createWorkflowDispatch({
              owner: "matchlighter",
              repo: "typedaemon-hassio",
              workflow_id: "bump-version.yml",
              ref: "master",
              inputs: {
                version: "${{ needs.deploy-docker.outputs.version }}",
                content,
              }
            })
